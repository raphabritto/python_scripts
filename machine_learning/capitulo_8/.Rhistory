1+4
setwd("~/workspace/python_scripts/machine_learning/capitulo_8")
sessionInfo()
RStudio.Version()
getwd()
getwd()
sessionInfo()
RStudio.Version()
sessionInfo()
# Carregando os dados
dados <- read.csv("dados_adolescentes.csv")
str(dados)
head(dados)
# Buscando valores missing para variáveis relacionadas ao sexo
table(dados$gender)
table(dados$gender, useNA = "ifany")
# Buscando valores missing para variáveis relacionadas a idade
summary(dados$age)
# Eliminando outliers na variável idade
dados$age <- ifelse(dados$age >= 13 & dados$age < 20, dados$age, NA)
# Buscando valores missing para variáveis relacionadas a idade
summary(dados$age)
summary(dados)
# Atribuindo valores missing na variável sexo para o tipo "outros"
dados$female <- ifelse(dados$gender == "F" & !is.na(dados$gender), 1, 0)
dados$outros <- ifelse(is.na(dados$gender), 1, 0)
# Verificando o resultado
table(dados$gender, useNA = "ifany")
table(dados$female, useNA = "ifany")
table(dados$outros, useNA = "ifany")
# Buscando a média de idade
mean(dados$age, na.rm = TRUE)
# Agregando os dados e calculando a média de idade por ano em que estev na escola
?aggregate
aggregate(data = dados, age ~ gradyear, mean, na.rm = TRUE)
# Cria um vetor com a média de idade para cada ano escolar
media_idade <- ave(dados$age, dados$gradyear, FUN = function(x) mean(x, na.rm = TRUE))
dados$age <- ifelse(is.na(dados$age), media_idade, dados$age)
media_idade
dados$age <- ifelse(is.na(dados$age), media_idade, dados$age)
# Criando um vetor com os interesses de cada jovem
interesses <- dados[5:40]
# Normalizando os dados
interesses_z <- as.data.frame(lapply(interesses, scale))
# Criando o modelo
set.seed(2345)
?kmeans
dados_clusters <- kmeans(interesses_z, 5)
print(dados_clusters)
# Verificando o tamanho dos clusters
dados_clusters$size
# Verificando o centro dos clusters
dados_clusters$centers
# Aplicando o ID dos clusters ao dataframe original
dados_clusters$cluster
dados$cluster <- dados_clusters$cluster
# Verificando os 5 primeiros registros
dados[1:5, c("cluster", "gender", "age", "friends")]
# Média de idade por cluster
aggregate(data = dados, age ~ cluster, mean)
# Proporção de mulheres por cluster
aggregate(data = dados, female ~ cluster, mean)
# Média de número de amigos por cluster
aggregate(data = dados, friends ~ cluster, mean)
# Pacotes
install.packages("fpc")
library(cluster)
library(fpc)
library(fpc)
# Pacotes
install.packages("flemix")
install.packages("fpc")
# Pacotes
install.packages("flemix")
# Cria outro modelo K-Means
dados_clusters2 <- kmeans(interesses_z, 6)
# Crias a matriz de distâncias
d = dist(dados)
d
d
# Crias a matriz de distâncias
d = dist(dados)
d
d[1:100]
cluster.stats(d, dados$cluster, dados_clusters2$cluster)
cluster.stats(d, dados$cluster, dados_clusters2$cluster)
library(cluster)
cluster.stats(d, dados$cluster, dados_clusters2$cluster)
# Compara os 2 modelos
?cluster.stats
# Compara os 2 modelos
??cluster.stats
library(cluster)
# Pacotes
install.packages("flexmix")
install.packages("fpc")
install.packages("fpc")
rm(d)
d[1:100]
rm(d)
# Crias a matriz de distâncias
d = dist(dados)
d[1:100]
rm(d)
install.packages("fpc")
